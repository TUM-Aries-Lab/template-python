name: CI

on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Lint • Type Check • Test (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - python-version: "3.11"
            experimental: false
          - python-version: "3.12"
            experimental: false
          - python-version: "3.13"
            experimental: false
    continue-on-error: ${{ matrix.experimental }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        id: py
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Cache virtualenv
        uses: actions/cache@v4
        id: cache
        with:
          path: .venv
          key: v1-poetry-${{ runner.os }}-py${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install deps (with dev group)
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          poetry env use "${{ steps.py.outputs.python-path }}"
          poetry install --no-interaction --no-ansi --with dev

      - name: Sync deps (cache hit)
        if: steps.cache.outputs.cache-hit == 'true'
        run: |
          poetry env use "${{ steps.py.outputs.python-path }}"
          poetry install --no-interaction --no-ansi --with dev

      - name: Show tool versions
        run: |
          poetry run python -V
          poetry run ruff --version
          poetry run mypy --version
          poetry run pytest --version

      - name: Ruff (format & lint)
        run: |
          poetry run ruff format --check .
          poetry run ruff check .

      - name: Mypy (install types if missing, then type check)
        run: |
          # Auto-install missing type stubs in CI (non-interactive)
          poetry run mypy --install-types --non-interactive || true
          poetry run mypy src/ tests/ --ignore-missing-imports  --disable-error-code=call-overload

      - name: Pytest (coverage gate)
        run: |
          poetry run pytest -q --cov=adaptive_oscillator --cov-report=term-missing --cov-fail-under=85
